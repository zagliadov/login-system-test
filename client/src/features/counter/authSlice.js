import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  value: 0,
  status: "",
  user: null,
  token: null,
  message: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const registration = createAsyncThunk(
  "auth/registration",
  async (data) => {
    try {
      return await axios
        .post(`http://127.0.0.1:9001/api/auth/registration`, data)
        .then((response) => response.data)
        .then((data) => data.message);
    } catch (error) {
      console.log(error);
    }
  }
);

export const login = createAsyncThunk("auth/login", async (data) => {
  try {
    return await axios
      .post(`http://127.0.0.1:9001/api/auth/login`, data)
      .then((response) => response.data)
      .then((data) => {
        if (!data) return;
        return data;
      });
  } catch (error) {
    console.log(error);
  }
});

export const verifyToken = createAsyncThunk(
  "auth/verifyToken",
  async (data) => {
    try {
      return await axios
        .post(`http://127.0.0.1:9001/api/auth/verifytoken`, data, {
          headers: {
            Authorization: `Bearer ${data}`,
          },
        })
        .then((response) => response.data)
        .then((data) => {
          return data;
        });
    } catch (error) {
      console.log(error);
    }
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    removeMessage(state) {
      state.message = null;
    },
    removeToken() {
      localStorage.removeItem("token");
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(registration.pending, (state) => {
        state.status = "loading";
      })
      .addCase(registration.fulfilled, (state, { payload }) => {
        state.status = "resolved";
        state.status = String(payload);
      })
      .addCase(registration.rejected, () => {});
    builder
      .addCase(login.pending, (state) => {
        state.status = "loading";
      })
      .addCase(login.fulfilled, (state, action) => {
        if (action.payload.hasOwnProperty("message")) {
          state.message = action.payload.message;
        }
        state.status = "resolved";
        if (typeof action.payload === "string") {
          state.token = String(action.payload);
          localStorage.setItem("token", String(action.payload));
        }
      })
      .addCase(login.rejected, () => {});
    builder
      .addCase(verifyToken.pending, (state) => {
        state.status = "loading";
      })
      .addCase(verifyToken.fulfilled, (state, { payload }) => {
        state.status = "resolved";
        state.user = payload;
      })
      .addCase(verifyToken.rejected, () => {});
  },
});

export const { removeMessage, removeToken } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getStatus = (state) => state.counter.token;

export default authSlice.reducer;
